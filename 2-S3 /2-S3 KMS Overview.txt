==============================
2-S3 KMS Overview
==============================

1. Overview
-----------
- **Purpose**: AWS Key Management Service (KMS) is used to create, store, and manage cryptographic keys for encryption and decryption.
- **Usage Context**: Widely integrated across various AWS services (e.g., S3) for encryption. It is crucial for AWS certification exams.
- **Regional Nature**: KMS is a regional service; keys are stored within a specific region and do not leave that region. (Multi-region features exist but are covered separately.)

2. Core Functionality
---------------------
- **Key Management**: 
  - KMS handles both symmetric and asymmetric keys.
  - It securely stores cryptographic keys (never exposing the plaintext key material outside of KMS).
- **Cryptographic Operations**:
  - Provides operations such as encryption, decryption, and generation of data encryption keys (DEKs).
  - Supports encrypting data up to 4 KB directly using KMS keys.
- **Data Encryption Keys (DEKs)**:
  - DEKs are generated using a KMS key.
  - KMS returns both a plaintext version (for immediate use) and an encrypted version (for storage with encrypted data).
  - The plaintext DEK is used for local encryption/decryption and then discarded, ensuring security.

3. KMS Key Structure and Lifecycle
------------------------------------
- **KMS Keys (formerly CMKs)**:
  - Logical containers holding key metadata (e.g., key ID, creation date, key policy, description, and state).
  - Encompass physical key material (generated by KMS or imported).
  - Can be rotated: Old key versions remain available to decrypt previously encrypted data.
- **Key Material**: 
  - Always encrypted at rest.
  - Never leaves the KMS service.

4. Key Types and Management Options
-------------------------------------
- **AWS-Owned vs. Customer-Owned**:
  - **AWS-Owned Keys**: Managed by AWS for use across multiple accounts; typically operate in the background.
  - **Customer-Owned Keys**: Can be either AWS-managed or customer-managed.
- **AWS-Managed Keys vs. Customer-Managed Keys**:

| Key Type              | Creation & Management                   | Customization                      | Rotation Behavior                     |
|-----------------------|-----------------------------------------|------------------------------------|---------------------------------------|
| AWS-Managed Keys      | Automatically created by AWS services   | Limited (not customizable)         | Fixed rotation (approximately once per year) |
| Customer-Managed Keys | Explicitly created by the customer      | Fully configurable (e.g., key policies, cross-account access) | Optional rotation (enabled by default, approx. once per year) |

5. Permissions and Security
---------------------------
- **Key Policy**:
  - Every KMS key has an attached key policy (a resource policy) that defines access and usage permissions.
  - Must explicitly grant trust to the AWS account; unlike other services, account trust is not implicit.
- **Granular Permissions**:
  - Separate permissions exist for key management, encryption, and decryption.
  - Users can be granted specific rights (e.g., only encrypt data, without decryption rights) based on security requirements.
- **Alternate Mechanisms**:
  - Grants provide an additional way to allow temporary permissions for specific operations (covered separately).

6. Operational Flow Example
---------------------------
- **Key Creation and Use**:
  - A user (e.g., Ashley) creates a KMS key in a selected region.
  - The key is used for encryption by passing data to KMS, which decrypts the key internally to perform the operation.
  - For decryption, the encrypted data (which includes embedded key information) is sent back to KMS, which performs the decryption and returns the plaintext.
- **DEK Workflow**:
  - Generate a data encryption key via KMS.
  - Use the plaintext DEK for encryption of larger data (beyond 4 KB) on the client side.
  - Store the encrypted DEK alongside the encrypted data for future decryption operations.

7. Conclusion
-------------
- **Key Takeaways**:
  - KMS is essential for secure key management and encryption operations in AWS.
  - It enforces strict security by never exposing key material outside the service.
  - Understanding the nuances of key types, permissions, and the DEK model is critical for both practical application and AWS exam success.