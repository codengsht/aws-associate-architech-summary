===============================================
18-DynamoDB Local and Global Secondary Indexes
===============================================

DynamoDB supports two types of indexes to improve query efficiency by providing alternative “views” on table data:
- Local Secondary Indexes (LSIs)
- Global Secondary Indexes (GSIs)
  
Both let you offload query patterns that would otherwise require expensive Scan operations, but they differ in key flexibility, creation timing, capacity management, and consistency.

Local Secondary Indexes (LSIs)
------------------------------
- **Definition**: An alternative view on a base table that uses the **same partition key** but a **different sort key**.
- **Creation**: Must be defined **at the same time** as the base table; you cannot add LSIs later.
- **Limit**: Up to **5 LSIs** per table.
- **Capacity**: Shares the base table’s read/write capacity units (RCU/WCU) under provisioned mode.
- **Consistency**: Supports **strongly consistent** (and eventual) reads.
- **Projections**:
  - **ALL** attributes
  - **KEYS_ONLY**
  - **INCLUDE** (specify a subset of non-key attributes)
- **Sparse Indexes**: Only items with a value for the chosen sort-key attribute appear in the index, enabling efficient scans on that subset.

Example: Sunny-Day LSI
----------------------
- **Base Table**: Records daily weather for each station (PK = StationID, SK = Date).
- **Requirement**: Query only “sunny” days without scanning entire table.
- **LSI**: Define at creation with SK = SunnyDayFlag.
- **Benefit**: Query by StationID + SunnyDayFlag → returns only sunny-day records; scans on the index only consume capacity for items marked sunny.

Global Secondary Indexes (GSIs)
-------------------------------
- **Definition**: An alternative view that can use a **different partition key** and a **different sort key** than the base table.
- **Creation**: Can be added **any time** after table creation.
- **Limit**: Up to **20 GSIs** per table (default).
- **Capacity**: Each GSI has its own provisioned RCU/WCU.
- **Consistency**: **Eventually consistent** only (data is replicated asynchronously).
- **Projections**: Same options as LSIs (ALL, KEYS_ONLY, INCLUDE).
- **Sparse Indexes**: Only items with the indexed partition key attribute appear in the GSI.

Example: Alarm-Event GSI
------------------------
- **Base Table**: Weather station data including an “Alarm” attribute when sensors are disrupted.
- **Requirement**: Efficiently query all alarmed readings, optionally filtered by station.
- **GSI**: PK = AlarmFlag, SK = StationID.
- **Benefit**: Query the GSI to fetch only alarmed items, then narrow by station ID without scanning the full table.

Comparison Table: LSI vs. GSI
-----------------------------

| Feature              | LSI                            | GSI                        |
|----------------------|--------------------------------|----------------------------|
| Creation time        | Created only at table creation | Can be created anytime     |
| Partition key        | Same as base table             | Custom partition key       |
| Sort key             | Alternative sort key           | Custom sort key            |
| Capacity consumption | Shared with base table         | Separate RCU/WCU           |
| Read consistency     | Supports strong and eventual consistency | Eventually consistent only |
| Max per table        | Up to 5                        | Up to 20 (default)         |
| Projection options   | Keys only, include, all        | Keys only, include, all    |

Indexing Considerations
-----------------------
- **Attribute Projection**  
  - Project **only** what you need. Projecting extra attributes increases RCU/WCU consumption proportional to item size.
  - Queries on non-projected attributes trigger a back-end fetch (inefficient).
- **Sparse Index Advantage**  
  - If an attribute is absent on many items, the index stores only those items that have it.
- **Use GSIs by Default**  
  - Unless you specifically need strong consistency at index read time, GSIs are more flexible and can be added later.

Exam Power-Up Points
--------------------
- **LSI = Local, Same PK, alt Sort Key**:  
  - Must define at table creation  
  - Max 5 per table  
  - Shares capacity, supports strong reads
- **GSI = Global, Custom PK & SK**:  
  - Can add post-creation  
  - Max 20 per table (default)  
  - Own capacity, eventual consistency only
- **Projection Types**: ALL, KEYS_ONLY, INCLUDE  
- **Sparse Index**: Only stores items with the indexed attribute  
- **Capacity Planning**: Always size projections to minimize wasted RCU/WCU  
- **Design Strategy**: Base table for primary access pattern; indexes for all alternative patterns.