==============================================
9-Multi-master writes
==============================================

1. Introduction
---------------
- **Purpose:** Aurora Multi-Master allows an Aurora cluster to operate with multiple instances that can perform both read and write operations.
- **Contrast:** Unlike the default single-master mode (one write instance with read-only replicas), multi-master mode enables all nodes to accept writes, enhancing availability and fault tolerance.

2. Architecture Overview
------------------------
- **Default (Single Master) Mode:**
  - One primary instance handles all writes and reads.
  - Read-only replicas handle read scaling via a cluster endpoint.
  - Failover involves promoting a replica to become the new primary, which may incur delays.
  
- **Multi-Master Mode:**
  - All instances are active and capable of both read and write operations.
  - No centralized cluster endpoint; the application must manage connections to individual instances.
  - When a write is received by any node, it proposes the change to all nodes through a quorum process:
    - Each node confirms or rejects the write (e.g., if conflicts exist).
    - Once a quorum is reached, the change is committed to the shared storage.
    - The update is then replicated to all nodesâ€™ in-memory caches, ensuring consistency.

3. Benefits & Use Cases
------------------------
- **Improved Availability & Fault Tolerance:**
  - With multiple write-capable nodes, failure of one instance does not disrupt operations.
  - Applications can continue sending write operations to other active nodes without waiting for failover.
- **Faster Recovery:**
  - Eliminates lengthy failover procedures since all nodes are active.
- **Fault-Tolerant Application Design:**
  - Enables applications to be designed for high resilience by maintaining connections to multiple database nodes.
  
4. Considerations & Limitations
-------------------------------
- **Application-Level Load Balancing:**
  - No built-in cluster endpoint for automatic load balancing; the application must manage connections to the individual instances.
- **Complexity:**
  - Requires careful design to handle quorum-based write commits and to manage potential conflicts.
- **Consistency Assurance:**
  - Involves a distributed consensus mechanism to ensure all nodes are synchronized after each write.

5. Comparison: Single Master vs. Multi-Master
----------------------------------------------

| Feature                 | Single Master Aurora                           | Multi-Master Aurora                               |
|-------------------------|------------------------------------------------|---------------------------------------------------|
| Write Capability        | One primary handles all writes; replicas are read-only | All instances are write-capable                    |
| Connection Endpoint     | Single cluster endpoint (load balances reads/writes) | No centralized endpoint; applications connect to individual nodes |
| Failover Process        | Requires promotion of a replica (can take time) | Instant failover; other nodes continue processing writes |
| Replication Mechanism   | Synchronous replication from primary to standby | Quorum-based write commit with in-memory cache updates |
| Availability            | Limited by single write node; potential disruption on failover | Higher availability; designed for fault-tolerant operations  |
| Application Responsibility | Minimal; automatic endpoint handling          | Must implement connection management and load balancing |

6. Conclusion
-------------
- Aurora Multi-Master is an advanced feature that significantly improves write availability and reduces failover time.
- It is ideal for fault-tolerant applications requiring high uptime and distributed write operations.
- However, the lack of a centralized endpoint requires additional application logic to manage connections and load balancing.